<!DOCTYPE html>
<html>
<head>
    <title><%= exception.class %> at <%= request_path %></title>
    <style>
    /* Basic reset */
    * {
        margin: 0;
        padding: 0;
    }

    table {
        width: 100%;
        border-collapse: collapse;
    }

    th, td {
        vertical-align: top;
        text-align: left;
    }

    body {
        font-size: 10pt;
    }

    body, td, input, textarea {
        font-family: helvetica neue, lucida grande, sans-serif;
        line-height: 1.5;
        color: #333;
        text-shadow: 0 1px 0 rgba(255, 255, 255, 0.6);
    }

    html {
        background: #f0f0f5;
    }

    /* ---------------------------------------------------------------------
     * Basic layout
     * --------------------------------------------------------------------- */

    /* Small */
    @media screen and (max-width: 1100px) {
        html {
            overflow-y: scroll;
        }

        body {
            margin: 0 20px;
        }

        header.exception {
            margin: 0 -20px;
        }

        nav.sidebar {
            padding: 0;
            margin: 20px 0;
        }

        ul.frames {
            max-height: 200px;
            overflow: auto;
        }
    }

    /* Wide */
    @media screen and (min-width: 1100px) {
        header.exception {
           position: fixed;
           top: 0;
           left: 0;
           right: 0;
        }

        nav.sidebar,
        .frame_info {
            position: fixed;
            top: 93px;
            bottom: 0;

            box-sizing: border-box;

            overflow-y: auto;
            overflow-x: hidden;
        }

        nav.sidebar {
            width: 40%;
            left: 20px;
            top: 113px;
            bottom: 20px;
        }

        .frame_info {
            right: 0;
            width: 60%;

            padding: 20px;
            padding-left: 40px;
        }
    }

    nav.sidebar {
        background: #d3d3da;
        border-top: solid 5px #444;
        border-bottom: solid 5px #444;
        border-radius: 4px;
        box-shadow: 0 0 6px rgba(0, 0, 0, 0.3), inset 0 0 0 1px rgba(0, 0, 0, 0.1);
    }

    /* ---------------------------------------------------------------------
     * Header
     * --------------------------------------------------------------------- */

    header.exception {
        color: #999;
        text-shadow: 0 1px 0 rgba(255, 255, 255, 0.8);

        padding: 10px 20px 14px 20px;

        background-color: #222;
        background: -webkit-linear-gradient(top, #484848, #282828);
        color: #aaa;
        text-shadow: 0 1px 0 rgba(0, 0, 0, 0.3);
        font-weight: 200;
        box-shadow: inset 0 -5px 3px -3px rgba(0, 0, 0, 0.05), inset 0 -1px 0 rgba(0, 0, 0, 0.05), inset 0 1px 0 rgba(0, 0, 0, 0.5), inset 0 2px 0 rgba(255, 255, 255, 0.3);
    }

    /* Heading */
    header.exception h2 {
        font-weight: 200;
        font-size: 22pt;
    }


    header.exception h2,
    header.exception p {
        line-height: 1.4em;
        height: 1.4em;
        overflow: hidden;
        white-space: pre;
        text-overflow: ellipsis;
    }

    header.exception h2 strong {
        font-weight: 700;
        color: #333;
        color: white;
    }

    header.exception p {
        font-size: 12pt;
    }

    /* ---------------------------------------------------------------------
     * Navigation
     * --------------------------------------------------------------------- */

    nav.tabs {
        border-top: solid 1px #333;
        border-bottom: solid 1px #111;

        background-color: #444;
        background: -webkit-linear-gradient(top, #444, #222);
        text-align: center;

        padding: 6px;

        box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.1);
    }

    nav.tabs a {
        display: inline-block;

        height: 22px;
        line-height: 22px;
        padding: 0 10px;

        text-decoration: none;
        font-size: 8pt;
        font-weight: bold;

        color: #888;
        text-shadow: 0 0 4px rgba(0, 0, 0, 0.4), 0 1px 0 rgba(0, 0, 0, 0.4);
    }

    nav.tabs a.selected {
        color: white;
        background: rgba(0, 0, 0, 0.5);
        border-radius: 16px;
        box-shadow: 1px 1px 0 rgba(255, 255, 255, 0.1);
    }

    /* Lighter tabs for smaller screens, because black looks too heavy. */
    @media screen and (max-width: 1100px) {
        nav.tabs {
            background: #eee;
            border-bottom: solid 1px #ddd;
        }

        nav.tabs a {
            color: #999;
            text-shadow: 0 1px 0 rgba(255, 255, 255, 0.6);
        }

        nav.tabs a.selected {
            text-shadow: 0 0 4px rgba(0, 0, 0, 0.4), 0 1px 0 rgba(0, 0, 0, 0.4);
        }
    }

    /* ---------------------------------------------------------------------
     * Sidebar
     * --------------------------------------------------------------------- */

    ul.frames {
        border-bottom: solid 1px #bbb;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    /* Each item */
    ul.frames li {
        background-color: #f8f8f8;
        background: -webkit-linear-gradient(top, #f8f8f8, #f0f0f0);
        border-bottom: solid 1px #e2e2e2;
        padding: 7px 20px;

        cursor: pointer;
        overflow: hidden;
    }

    ul.frames .name,
    ul.frames .location {
        overflow: hidden;
        height: 1.5em;

        white-space: pre;
        word-wrap: none;
        text-overflow: ellipsis;
    }

    ul.frames .name {
        font-weight: bold;
    }

    ul.frames .location {
        font-size: 0.85em;
        font-weight: 400;
        color: #999;
    }

    ul.frames .line {
        font-weight: bold;
    }

    /* Selected frame */
    ul.frames li.selected {
        background-color: #39a;
        background: -webkit-linear-gradient(top, #39a, #179);
        box-shadow: inset 0 1px 0 rgba(0, 0, 0, 0.2), inset 0 2px 0 rgba(255, 255, 255, 0.2);
    }

    ul.frames li.selected .name,
    ul.frames li.selected .location {
        color: white;
        text-shadow: 0 1px 0 rgba(0, 0, 0, 0.2);
    }

    /* Iconography */
    ul.frames li .icon {
        display: block;
        width: 20px;
        height: 20px;
        line-height: 20px;
        border-radius: 15px;

        text-align: center;

        background: white;
        border: solid 2px #ccc;

        float: left;

        margin-right: 20px;
        margin-top: 5px;

        font-size: 9pt;
        font-weight: 200;
        font-style: normal;
    }

    ul.frames .icon.application {
        background: #808090;
        border-color: #555;
    }

    ul.frames .icon.application:before {
        content: 'A';
        color: white;
        text-shadow: 0 0 3px rgba(0, 0, 0, 0.2);
    }

    /* Responsiveness -- flow to single-line mode */
    @media screen and (max-width: 1100px) {
        ul.frames li {
            padding-top: 4px;
            padding-bottom: 4px;
        }

        ul.frames li .icon {
            margin-top: 2px;
            width: 11px;
            height: 11px;
            line-height: 11px;
        }

        ul.frames .name,
        ul.frames .location {
            display: inline-block;
        }

        ul.frames .name {
            margin-right: 10px;
        }
    }

    /* ---------------------------------------------------------------------
     * Monospace
     * --------------------------------------------------------------------- */

    pre, code, .repl input {
        font-family: menlo, lucida console, monospace;
        font-size: 8pt;
    }

    /* ---------------------------------------------------------------------
     * Display area
     * --------------------------------------------------------------------- */

    .trace_info {
        background: #fff;
        padding: 6px;
        border-radius: 3px;
        margin-bottom: 2px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.03), 1px 1px 0 rgba(0, 0, 0, 0.05), -1px 1px 0 rgba(0, 0, 0, 0.05), 0 0 0 4px rgba(0, 0, 0, 0.04);
    }

    /* Titlebar */
    .trace_info .title {
        background: #f1f1f1;

        box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.3);
        overflow: hidden;
        padding: 6px 10px;

        border: solid 1px #ccc;
        border-bottom: 0;

        border-top-left-radius: 2px;
        border-top-right-radius: 2px;
    }

    .trace_info .title .name,
    .trace_info .title .location {
        font-size: 9pt;
        line-height: 26px;
        height: 26px;
        overflow: hidden;
    }

    .trace_info .title .name {
        float: left;
        font-weight: bold;
        font-size: 10pt;
    }

    .trace_info .title .location {
        float: right;
        font-weight: 200;
        color: #999;
    }

    .code, .console {
        background: #fff;
        padding: 5px;

        box-shadow: inset 3px 3px 3px rgba(0, 0, 0, 0.1), inset 0 0 0 1px rgba(0, 0, 0, 0.1);
    }

    .code {
        margin-bottom: -1px;
    }

    .code {
        padding: 10px 0;
        overflow: auto;
    }

    .code .highlight {
        background: rgba(220, 30, 30, 0.1);
    }

    /* REPL shell */
    .console {
        padding: 10px;
        border-bottom-left-radius: 2px;
        border-bottom-right-radius: 2px;
    }

    .console pre {
        max-height: 200px;
        overflow: auto;
        word-wrap: break-word;
        border-bottom: solid 1px #cdf;
        padding-bottom: 10px;
        margin-bottom: 10px;
    }

    .console pre:empty {
        padding-bottom: 0;
        margin-bottom: 0;
        border-bottom: 0;
    }

    .console input,
    .console input:focus {
        outline: 0;
        border: 0;
        padding: 0;
        background: transparent;
        margin: 0;
    }

    /* Hint text */
    .hint {
        margin: 15px 0 20px 0;
        font-size: 8pt;
        color: #8080a0;
        padding-left: 20px;
    }

    .hint:before {
        content: '\25b2';
        margin-right: 5px;
        opacity: 0.5;
    }

    /* ---------------------------------------------------------------------
     * Variable infos
     * --------------------------------------------------------------------- */

    .sub {
        border-top: solid 2px #ccc;
        box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.3);
        padding: 10px 0;
        margin: 10px 0;
    }

    .sub h3 {
        color: #39a;
        font-size: 1.1em;
        margin-bottom: 10px;
    }

    .sub .inset {
        overflow-y: auto;
    }

    .sub table td {
        border-top: solid 1px #ddd;
        padding: 7px 1px;
        width: 90%;
    }

    .sub table td.name {
        width: auto;
        min-width: 150px;

        font-weight: bold;
        font-size: 0.8em;
        padding-right: 20px;
    }

    .sub table td pre {
        word-wrap: break-word;
        white-space: normal;
    }

    /* ---------------------------------------------------------------------
     * Scrollbar
     * --------------------------------------------------------------------- */

    nav.sidebar::-webkit-scrollbar,
    .inset pre::-webkit-scrollbar,
    .console pre::-webkit-scrollbar,
    .code::-webkit-scrollbar {
        width: 10px;
        height: 10px;
    }

    .inset pre::-webkit-scrollbar-thumb,
    .console pre::-webkit-scrollbar-thumb,
    .code::-webkit-scrollbar-thumb {
        background: #ddd;
        border-radius: 5px;
    }

    nav.sidebar::-webkit-scrollbar-thumb {
        background: rgba(0, 0, 0, 0.0);
        border-radius: 5px;
    }

    nav.sidebar:hover::-webkit-scrollbar-thumb {
        background-color: #999;
        background: -webkit-linear-gradient(left, #aaa, #999);
    }


    </style>
</head>
<body>
    <div class='top'>
    <header class="exception">
        <h2><strong><%= exception.class %></strong> <span>at <%= request_path %></span></h2>
        <p><%= exception_message %></p>
    </header>

    </div>

    <section class="backtrace">
        <nav class="sidebar">
        <nav class="tabs">
            <a href="#" id="application_frames">Application Frames</a>
            <a href="#" id="all_frames">All Frames</a>
        </nav>
        <ul class="frames">
            <% backtrace_frames.each_with_index do |frame, index| %>
                <li
                    class="<%= frame.context %>"
                    data-context="<%= frame.context %>"
                    data-full-filename="<%= frame.filename %>"
                    data-filename="<%= frame.pretty_path %>"
                    data-line="<%= frame.line %>"
                    data-name="<%= frame.name %>"
                    data-index="<%= index %>"
                >
                    <span class='stroke'></span>
                    <i class="icon <%= frame.context %>"></i>
                    <div class="info">
                    <div class="name"><%= frame.name %></div>
                    <div class="location"><span class="filename"><%= frame.pretty_path %></span>, line <span class="line"><%= frame.line %></span></div>
                    </div>
                </li>
            <% end %>
        </ul>
        </nav>

        <% backtrace_frames.each_with_index do |frame, index| %>
            <div class="frame_info" id="frame_info_<%= index %>" style="display:none;">
                <header class="trace_info">
                <div class="title">
                <h2 class="name"><%= frame.name %></h2>
                <div class="location"><span class="filename"><%= frame.pretty_path %></span>, line <span class="line"><%= frame.line %></span></div>
                </div>
                <%== highlighted_code_block frame %>
                
                <% if BetterErrors.binding_of_caller_available? && frame.frame_binding %>
                    <div class="repl">
                        <div class="console">
                            <pre></pre>
                            <div class="prompt"><span>&gt;&gt;</span> <input/></div>
                        </div>
                    </div>
                <% end %>
                </header>

                <% if BetterErrors.binding_of_caller_available? && frame.frame_binding %>
                    <div class="hint">
                        This a live shell. Type in here.
                    </div>

                    <div class="variable_info"></div>
                <% end %>
                <% unless BetterErrors.binding_of_caller_available? %>
                    <div class="hint">
                        <strong>Tip:</strong> add <code>gem "binding_of_caller"</code> to your Gemfile to enable the REPL and local/instance variable inspection.
                    </div>
                <% end %>
            </div>
        <% end %>
        <div style="clear:both"></div>
    </section>
</body>
<script>
(function() {
    var OID = <%== object_id.to_s.inspect %>;
    
    var previousFrame = null;
    var previousFrameInfo = null;
    var allFrames = document.querySelectorAll("ul.frames li");
    var allFrameInfos = document.querySelectorAll(".frame_info");

    function apiCall(method, opts, cb) {
        var req = new XMLHttpRequest();
        req.open("POST", "/__better_errors/" + OID + "/" + method, true);
        req.setRequestHeader("Content-Type", "application/json");
        req.send(JSON.stringify(opts));
        req.onreadystatechange = function() {
            if(req.readyState == 4) {
                var res = JSON.parse(req.responseText);
                cb(res);
            }
        };
    }
    
    function escapeHTML(html) {
        return html.replace(/&/, "&amp;").replace(/</g, "&lt;");
    }
    
    function REPL(index) {
        this.index = index;
        
        this.previousCommands = [];
        this.previousCommandOffset = 0;
    }
    
    REPL.all = [];
    
    REPL.prototype.install = function(containerElement) {
        this.container = containerElement;
    
        this.promptElement  = this.container.querySelector(".prompt span");
        this.inputElement   = this.container.querySelector("input");
        this.outputElement  = this.container.querySelector("pre");
    
        this.inputElement.onkeydown = this.onKeyDown.bind(this);
    
        this.setPrompt(">>");
        
        REPL.all[this.index] = this;
    }
    
    REPL.prototype.focus = function() {
        this.inputElement.focus();
    };
    
    REPL.prototype.setPrompt = function(prompt) {
        this._prompt = prompt;
        this.promptElement.innerHTML = escapeHTML(prompt);
    };
    
    REPL.prototype.getInput = function() {
        return this.inputElement.value;
    };
    
    REPL.prototype.setInput = function(text) {
        this.inputElement.value = text;
        
        if(this.inputElement.setSelectionRange) {
            // set cursor to end of input
            this.inputElement.setSelectionRange(text.length, text.length);
        }
    };
    
    REPL.prototype.writeRawOutput = function(output) {
        this.outputElement.innerHTML += output;
        this.outputElement.scrollTop = this.outputElement.scrollHeight;
    };
    
    REPL.prototype.writeOutput = function(output) {
        this.writeRawOutput(escapeHTML(output));
    };
    
    REPL.prototype.sendInput = function(line) {
        var self = this;
        apiCall("eval", { "index": this.index, source: line }, function(response) {
            if(response.error) {
                self.writeOutput(response.error + "\n");
            }
            self.writeOutput(self._prompt + " ");
            self.writeRawOutput(response.highlighted_input + "\n");
            self.writeOutput(response.result);
            self.setPrompt(response.prompt);
        });
    };
    
    REPL.prototype.onEnterKey = function() {
        var text = this.getInput();
        if(text != "" && text !== undefined) {
            this.previousCommandOffset = this.previousCommands.push(text);
        }
        this.setInput("");
        this.sendInput(text);
    };
    
    REPL.prototype.onNavigateHistory = function(direction) {
        this.previousCommandOffset += direction;
        
        if(this.previousCommandOffset < 0) {
            this.previousCommandOffset = -1;
            this.setInput("");
            return;
        }
        
        if(this.previousCommandOffset >= this.previousCommands.length) {
            this.previousCommandOffset = this.previousCommands.length;
            this.setInput("");
            return;
        }
        
        this.setInput(this.previousCommands[this.previousCommandOffset]);
    };
    
    REPL.prototype.onKeyDown = function(ev) {
        if(ev.keyCode == 13) {
            this.onEnterKey();
        } else if(ev.keyCode == 38) {
            // the user pressed the up arrow.
            this.onNavigateHistory(-1);
            return false;
        } else if(ev.keyCode == 40) {
            // the user pressed the down arrow.
            this.onNavigateHistory(1);
            return false;
        }
    };
    
    function populateVariableInfo(index) {
        var el = allFrameInfos[index];
        var varInfo = el.querySelector(".variable_info");
        if(varInfo && varInfo.innerHTML == "") {
            apiCall("variables", { "index": index }, function(response) {
                if(response.error) {
                    varInfo.innerHTML = "<span class='error'>" + escapeHTML(response.error) + "</span>";
                } else {
                    varInfo.innerHTML = response.html;
                }
            });
        }
    }
    
    function selectFrameInfo(index) {
        populateVariableInfo(index);
        
        if(previousFrameInfo) {
            previousFrameInfo.style.display = "none";
        }
        previousFrameInfo = allFrameInfos[index];
        previousFrameInfo.style.display = "block";
        
        if(REPL.all[index]) {
            REPL.all[index].focus();
        }
    }
    
    for(var i = 0; i < allFrames.length; i++) {
        (function(i, el) {
            var el = allFrames[i];
            el.onclick = function() {
                if(previousFrame) {
                    previousFrame.className = "";
                }
                el.className = "selected";
                previousFrame = el;
                
                selectFrameInfo(el.attributes["data-index"].value);
            };
            var repl = allFrameInfos[i].querySelector(".repl .console");
            if(repl) {
                new REPL(i).install(repl);
            }
        })(i);
    }
    
    // Click the first application frame
    (
      document.querySelector(".frames li.application") ||
      document.querySelector(".frames li")
    ).click();
    
    var applicationFramesButton = document.getElementById("application_frames");
    var allFramesButton = document.getElementById("all_frames");
    
    applicationFramesButton.onclick = function() {
        allFramesButton.className = "";
        applicationFramesButton.className = "selected";
        for(var i = 0; i < allFrames.length; i++) {
            if(allFrames[i].attributes["data-context"].value == "application") {
                allFrames[i].style.display = "block";
            } else {
                allFrames[i].style.display = "none";
            }
        }
        return false;
    };
    
    allFramesButton.onclick = function() {
        applicationFramesButton.className = "";
        allFramesButton.className = "selected";
        for(var i = 0; i < allFrames.length; i++) {
            allFrames[i].style.display = "block";
        }
        return false;
    };
    
    allFramesButton.click();
})();
</script>
</html>
<!-- generated by Better Errors in <%= Time.now.to_f - @start_time %> seconds -->
